/**
    * margin      m{rozmiar}{?-strona}{?-breakpoint}
    * padding     p{rozmiar}{?-strona}{?-breakpoint}
*/
$spacing-max: 180px;
$spacing-levels: 15;

$spacing-map: () !default;

$margin-map: (
    'margin': (
        'props': margin,
        'name': ''
    ),
    'margin-left': (
        'props': margin-left,
        'name': l
    ),
    'margin-right': (
        'props': margin-right,
        'name': r
    ),
    'margin-top': (
        'props': margin-top,
        'name': t
    ),
    'margin-bottom': (
        'props': margin-bottom,
        'name': b
    ),
    'margin-x': (
        'props': margin-right margin-left,
        'name': x
    ),
    'margin-y': (
        'props': margin-top margin-bottom,
        'name': y
    )
);

$padding-map: (
    'padding': (
        'props': padding,
        'name': ''
    ),
    'padding-left': (
        'props': padding-left,
        'name': l
    ),
    'padding-right': (
        'props': padding-right,
        'name': r
    ),
    'padding-top': (
        'props': padding-top,
        'name': t
    ),
    'padding-bottom': (
        'props': padding-bottom,
        'name': b
    ),
    'padding-x': (
        'props': padding-right padding-left,
        'name': x
    ),
    'padding-y': (
        'props': padding-top padding-bottom,
        'name': y
    ),
);

$spacing-classes: (
    'padding':  p,
    'margin':   m
);

$spacing-map: map-merge($spacing-map, $margin-map);
$spacing-map: map-merge($spacing-map, $padding-map);

@each $breakpoint, $breakpoint-size in $grid-breakpoints{
    $infix: breakpoint-infix( $breakpoint, $grid-breakpoints );
    
    @include media-breakpoint-up( $breakpoint, $grid-breakpoints ){

        @each $item-key, $item-props in $spacing-map{

            $props: map-get( $item-props, 'props' );
            $direction: map-get( $item-props, 'name' );
            $classname: '';

            @each $spacing-prop, $spacing-class in $spacing-classes{
                @if( str-index($item-key, $spacing-prop) != null ){
                    $classname: $spacing-class;
                }
            }

            @if( type-of($props) == "string" ){
                $props: ($props);
            }

            @if( $direction != "" ){
                $direction: -#{$direction};
            }


            @for $i from 0 through $spacing-levels{
                .#{$classname}#{$i}#{$direction}#{$infix}{
                    @each $prop in $props{
                        #{$prop}: prx--rem(($i/$spacing-levels * $spacing-max)) !important;
                    }
                }
            }
        }

    }
}

.m-auto{
    margin-left: auto;
    margin-right: auto;
}

.m-auto-l{
    margin-left: auto;
}
.m-auto-r{
    margin-left: auto;
}
.m-gaps{
    margin-left: $container-gap;
    margin-right: $container-gap;
}
.p-gaps{
    padding-left: $container-gap;
    padding-right: $container-gap;
}